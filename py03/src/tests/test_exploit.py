import os
from bs4 import BeautifulSoup
import pytest

# Указываем путь к файлу для тестирования
input_html_file = "evilcorp.html"
output_html_file = "evilcorp_hacked.html"

@pytest.fixture
def setup_files():
    # Создание копии исходного файла для тестирования
    with open(input_html_file, "r", encoding="utf-8") as file:
        original_content = file.read()

    # Выполнение скрипта exploit.py
    os.system("python exploit.py")

    # Чтение результата
    with open(output_html_file, "r", encoding="utf-8") as file:
        modified_content = file.read()

    # Возвращаем оригинальное и модифицированное содержимое
    yield original_content, modified_content

    # Удаляем файл после тестов
    if os.path.exists(output_html_file):
        os.remove(output_html_file)

def test_title(setup_files):
    original_content, modified_content = setup_files
    soup = BeautifulSoup(modified_content, "html.parser")
    title_tag = soup.find("title")
    assert title_tag is not None, "Title tag not found in modified HTML."
    assert title_tag.string == "Evil Corp - Stealing your money every day", "Title was not modified correctly."

def test_h1_tag(setup_files):
    original_content, modified_content = setup_files
    soup = BeautifulSoup(modified_content, "html.parser")
    h1_tag = soup.find("h1")
    assert h1_tag is not None, "H1 tag not found in modified HTML."
    assert "you are hacked!" in h1_tag.text, "H1 tag does not contain the correct text."
    assert "Mr. Alderson" in h1_tag.text, "H1 tag does not contain the correct user's name and pronoun."

def test_trenton_script(setup_files):
    original_content, modified_content = setup_files
    soup = BeautifulSoup(modified_content, "html.parser")
    script_tag = soup.find("script", string=lambda text: "hacked = function" in text if text else False)
    assert script_tag is not None, "Trenton's script not found in modified HTML."
    assert "onsubmit" in script_tag.string, "Trenton's script does not contain the expected content."

def test_link_replacement(setup_files):
    original_content, modified_content = setup_files
    soup = BeautifulSoup(modified_content, "html.parser")
    link_tag = soup.find("a", href="https://mrrobot.fandom.com/wiki/Fsociety")
    assert link_tag is not None, "Link tag not found in modified HTML."
    assert link_tag.string == "Fsociety", "Link text was not modified correctly."

